#! /usr/bin/env bash

# bash ------------------------------------------------------------------------

${BASH_DEBUG:+trap '(read -p "[${BASH_SOURCE}:${LINENO}] [${BASH_COMMAND}] ")' DEBUG}


# location --------------------------------------------------------------------

set -eu
readonly _REALPATH=$(realpath "${BASH_SOURCE[ 0 ]}")
readonly _BASENAME=$(basename "${_REALPATH}")
readonly _DIRNAME=$(dirname "${_REALPATH}")
readonly _ROOT=$(dirname "${_DIRNAME}")
readonly _PREFIX=$(dirname "${_ROOT}")


# logging ----------------------------------------------------------------

function log { printf "%(%Y-%m-%d)TT%(%H:%M:%S%z)T  ${@}\n" -1 ; }
function err { printf "%(%Y-%m-%d)TT%(%H:%M:%S%z)T  ${@}\n" -1 1>&2 ; }

function banner {
    log ""
    log "-----------------------------------------------------------------------------"
    log ">>> ${@}"
    log "-----------------------------------------------------------------------------"
}


# prepare ---------------------------------------------------------------------

readonly python=$(which ${1:-python3})
[[ -z "${python}" ]] && { log "failed to find python [${1}]"; exit 111; }
readonly python_version=$( ${python} -c "import platform; print(platform.python_version())" )
readonly python_implementation=$( ${python} -c "import platform; print(platform.python_implementation())" )
readonly realpath_env_python=$(realpath ${python})

readonly venv_root=${_ROOT}/.venv
readonly venv_python=${venv_root}/bin/python

readonly venv_pip=${venv_root}/bin/pip
readonly venv_pip_requirement_txt=${_ROOT}/etc/pip/requirement.txt
readonly venv_pip_requirement_txt_freeze=${venv_pip_requirement_txt}.freeze

readonly bin_venv_python=${_ROOT}/bin/venv-python


# announce --------------------------------------------------------------------

banner "${_DIRNAME}/${_BASENAME}"
log ""
log "                  python [${python}] (${realpath_env_python})"
log "          python_version [${python_version}]"
log "   python_implementation [${python_implementation}]"
log ""
log "                    venv [${venv_root}]"
log "             venv_python [${venv_python}]"
log "                venv_pip [${venv_pip}]"
log "venv_pip_requirement_txt [${venv_pip_requirement_txt}]"
log ""


# execute ---------------------------------------------------------------------

log "(re)creating .venv/ directory"
${realpath_env_python} -m venv --clear ${venv_root}
log ""

log "updating pip wheel setuptools ..."
${venv_pip} install --isolated --no-compile --upgrade pip wheel setuptools
log ""

log "installing packages from etc/pip/requirement.txt ..."
${venv_pip} install --isolated --no-compile --upgrade --requirement ${venv_pip_requirement_txt}
log ""

log "checking package dependencies ..."
${venv_pip} check
log ""

log "writing installed packages in requirements format to etc/pip/requirement.txt.freeze ..."
${venv_pip} freeze \
    | grep --invert-match 'pkg-resources==0.0.0' \
    1> ${venv_pip_requirement_txt_freeze} 2>&1
log ""

log "updating ${venv_pip_requirement_txt}"
mv -v ${venv_pip_requirement_txt_freeze} ${venv_pip_requirement_txt}
bin_venv_python_version=$( ${bin_venv_python} -c "import platform; print(platform.python_version())" )
bin_venv_python_implementation=$( ${bin_venv_python} -c "import platform; print(platform.python_implementation())" )
banner "bin/venv-python is ${bin_venv_python_version} (${bin_venv_python_implementation})"
log ""

exit 0

